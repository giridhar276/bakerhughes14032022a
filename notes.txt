** Everything in Python is Object **
** Every object contains methods **

number
-----
number can be integer or decimal or octal or hexa.

val = 10
aval = 34.43


string
-------
string can be defined in single or double or triple quotes.

aname = "python programming"
bname = 'java programming'
cname = '''machine learning'''


list ( kind of array)
-----
list contains set of elements.
Elements can be set of numbers or strings or any combination.
list elements are defined in []

alist = [10,20,30,4]
blist = ["python","java",'oracle']
clist = [45,43,"unix",45.44]


tuple  ( unchangable , immutable  , uneditable)
------
tuple contains set of elements.
Elements can be set of numbers or strings or any combination.
tuple elements are defined in ().
*** Elements inside the tuple cant be modified  DIRECTLY***


atup = (45,23,56)
btup = ("python","oracle",34)


dictionary
-----------
dictionary contains elements in key:value pairs.
In dictionary, keys are number or string which is used to uniquely identify the value.
               Value can be either number or string or list or tuple or dictionary or any other complex structure

syntax:    object = {key:value , key:value ....}
            book  = {"chap1":10 ,"chap2":20}
            info  = {1:2,3:4,5:6}
           bookinfo={"chap1":[10,"UK","Rita"] ,"chap2":[20,"Gita","AUS"] }




set
-----------
set is UNORDERED collection of UNIQUE values of same type.



classification of objects
---------------------------

mutable objects    :  list   dictionary set

immutable objects  : number  string tuple





functions   -- reusability purpose
-----------
builtin functions
user defined functions

How to display all the builtin functions?

In the console(shell)....     dir(__builtins__)


builtin functions
--------------------
print()
len()
range()
type()
dir()
help()
input()
max()
min()
sum()
isinstance()
chr() : convert from ascii to char
ord() : convert from char to ascii


typecasting functions   - converting from one object to another object
------------------------
int()
float()
oct()
hex()
str()
list()
tuple()
dict()
set()


operators
------------

arithmetic operators :  + - * % /


assignment operator ( ++ and -- are NOT allowed in python )
-------------------
val = 10

val = val + 1   or val+=1
val = val -1   or  val-=1


relational operators
---------------------
< <= > >= == !=

name = input("Enter any value :")
if name == "python":
    print("Its python programming")


logical operators
------------------
and or  not 

name = "python"
if name.isupper()  and len(name) == 6 :
    #write something

if name.isupper()  or len(name) == 6 :
    #write something


special operators
-------------------
+ : concat operator

>>> [10,20] + [30,40]
[10, 20, 30, 40]

* : repetition

>>> name * 5
'pythonpythonpythonpythonpython'

in

if 'p' in "python":
   # true 



working with flat files ( csv conf log rtf txt .. )
-------------------------------------------------
read mode
write mode
append mode


opening the file
------------------


syntax:  object = open(filename,mode)
example:   fobj = open("customers.txt","r")    #read mode
           # In read mode , if file is not existing ... it will display error message           

           fobj = open("customers.txt","w")    #write mode
           case1:  if file is not existing ... file gets created first
           case2:  if file is already existing.. it overwrites the existing content first

           fobj = open("customers.txt","a")    #append mode
           case1:  if file is not existing ... file gets created first
           case2:  if file is already existing.. it appends the data to the end of the file


closing the file
------------------
object.close()



read operation
---------------

reading line by line using file object
fobj.read()
fobj.readlines()
using csv library
using pandas library ( mainly used in analytics projects )




exception handling
---------------------

Basically there are 2 types of errors.

1. syntax error
2. semantic error or runtime error

Handling the exceptions in runtime is known as exception handling


try
except
else
finally










user defined functions 

function|block|submodule|definition
------------------------------------
reusability purpose

ways of passing parameters
---------------------------

fixed arguments
default arguments
keyword arguments
variable length arguments


library | module | routines | package
------------------------------------
Every library contains set of methods.


builtin library   ( 3000+ libraries )
----------------
builtin libraries are generally used( OS operations , math operations , date and time operations , file operations .... )  by everyone in day-day operations

third party library    ( 360000+ libraries )
--------------------
Depending on the customized requirement ( data analytics , cloud related , ML , Image processsing , networking automations, database handling...) developer has to use third party library and should be installed from 

-www.pypi.org
- using pip tool
- using easy_tool tool
- conda tool




builtin libraries which are generally used
----------------------------------------
sys           : system python config information
urllib.request: working with http
requests      : API programming( creating and consuming rest api's)
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries
---------------------------------------
database related
----------------
pymysql   :
cx_Oracle
pymongo
pymssql

web frameworks ( developing web applications)
--------------
django
flask
bottom

analytics/machine learning
---------------------------
numpy
scipy
pandas
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv
pytorch


APIs ( REST API)
-----
requests

excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word
pandas

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pyping     :  ping any host or ip address





































































































working with third party files  ( pdf doc docx pptx xlsx rar tar .... )























































